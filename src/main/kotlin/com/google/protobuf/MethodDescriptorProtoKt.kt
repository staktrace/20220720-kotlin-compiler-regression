//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/descriptor.proto

package com.google.protobuf;

@kotlin.jvm.JvmSynthetic
public inline fun methodDescriptorProto(block: com.google.protobuf.MethodDescriptorProtoKt.Dsl.() -> kotlin.Unit): com.google.protobuf.DescriptorProtos.MethodDescriptorProto =
  com.google.protobuf.MethodDescriptorProtoKt.Dsl._create(com.google.protobuf.DescriptorProtos.MethodDescriptorProto.newBuilder()).apply { block() }._build()
public object MethodDescriptorProtoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.protobuf.DescriptorProtos.MethodDescriptorProto = _builder.build()

    /**
     * <code>optional string name = 1;</code>
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>optional string name = 1;</code>
     */
    public fun clearName() {
      _builder.clearName()
    }
    /**
     * <code>optional string name = 1;</code>
     * @return Whether the name field is set.
     */
    public fun hasName(): kotlin.Boolean {
      return _builder.hasName()
    }

    /**
     * <pre>
     * Input and output type names.  These are resolved in the same way as
     * FieldDescriptorProto.type_name, but must refer to a message type.
     * </pre>
     *
     * <code>optional string input_type = 2;</code>
     */
    public var inputType: kotlin.String
      @JvmName("getInputType")
      get() = _builder.getInputType()
      @JvmName("setInputType")
      set(value) {
        _builder.setInputType(value)
      }
    /**
     * <pre>
     * Input and output type names.  These are resolved in the same way as
     * FieldDescriptorProto.type_name, but must refer to a message type.
     * </pre>
     *
     * <code>optional string input_type = 2;</code>
     */
    public fun clearInputType() {
      _builder.clearInputType()
    }
    /**
     * <pre>
     * Input and output type names.  These are resolved in the same way as
     * FieldDescriptorProto.type_name, but must refer to a message type.
     * </pre>
     *
     * <code>optional string input_type = 2;</code>
     * @return Whether the inputType field is set.
     */
    public fun hasInputType(): kotlin.Boolean {
      return _builder.hasInputType()
    }

    /**
     * <code>optional string output_type = 3;</code>
     */
    public var outputType: kotlin.String
      @JvmName("getOutputType")
      get() = _builder.getOutputType()
      @JvmName("setOutputType")
      set(value) {
        _builder.setOutputType(value)
      }
    /**
     * <code>optional string output_type = 3;</code>
     */
    public fun clearOutputType() {
      _builder.clearOutputType()
    }
    /**
     * <code>optional string output_type = 3;</code>
     * @return Whether the outputType field is set.
     */
    public fun hasOutputType(): kotlin.Boolean {
      return _builder.hasOutputType()
    }

    /**
     * <code>optional .google.protobuf.MethodOptions options = 4;</code>
     */
    public var options: com.google.protobuf.DescriptorProtos.MethodOptions
      @JvmName("getOptions")
      get() = _builder.getOptions()
      @JvmName("setOptions")
      set(value) {
        _builder.setOptions(value)
      }
    /**
     * <code>optional .google.protobuf.MethodOptions options = 4;</code>
     */
    public fun clearOptions() {
      _builder.clearOptions()
    }
    /**
     * <code>optional .google.protobuf.MethodOptions options = 4;</code>
     * @return Whether the options field is set.
     */
    public fun hasOptions(): kotlin.Boolean {
      return _builder.hasOptions()
    }

    /**
     * <pre>
     * Identifies if client streams multiple client messages
     * </pre>
     *
     * <code>optional bool client_streaming = 5 [default = false];</code>
     */
    public var clientStreaming: kotlin.Boolean
      @JvmName("getClientStreaming")
      get() = _builder.getClientStreaming()
      @JvmName("setClientStreaming")
      set(value) {
        _builder.setClientStreaming(value)
      }
    /**
     * <pre>
     * Identifies if client streams multiple client messages
     * </pre>
     *
     * <code>optional bool client_streaming = 5 [default = false];</code>
     */
    public fun clearClientStreaming() {
      _builder.clearClientStreaming()
    }
    /**
     * <pre>
     * Identifies if client streams multiple client messages
     * </pre>
     *
     * <code>optional bool client_streaming = 5 [default = false];</code>
     * @return Whether the clientStreaming field is set.
     */
    public fun hasClientStreaming(): kotlin.Boolean {
      return _builder.hasClientStreaming()
    }

    /**
     * <pre>
     * Identifies if server streams multiple server messages
     * </pre>
     *
     * <code>optional bool server_streaming = 6 [default = false];</code>
     */
    public var serverStreaming: kotlin.Boolean
      @JvmName("getServerStreaming")
      get() = _builder.getServerStreaming()
      @JvmName("setServerStreaming")
      set(value) {
        _builder.setServerStreaming(value)
      }
    /**
     * <pre>
     * Identifies if server streams multiple server messages
     * </pre>
     *
     * <code>optional bool server_streaming = 6 [default = false];</code>
     */
    public fun clearServerStreaming() {
      _builder.clearServerStreaming()
    }
    /**
     * <pre>
     * Identifies if server streams multiple server messages
     * </pre>
     *
     * <code>optional bool server_streaming = 6 [default = false];</code>
     * @return Whether the serverStreaming field is set.
     */
    public fun hasServerStreaming(): kotlin.Boolean {
      return _builder.hasServerStreaming()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.google.protobuf.DescriptorProtos.MethodDescriptorProto.copy(block: com.google.protobuf.MethodDescriptorProtoKt.Dsl.() -> kotlin.Unit): com.google.protobuf.DescriptorProtos.MethodDescriptorProto =
  com.google.protobuf.MethodDescriptorProtoKt.Dsl._create(this.toBuilder()).apply { block() }._build()
