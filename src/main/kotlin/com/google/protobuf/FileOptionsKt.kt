//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: google/protobuf/descriptor.proto

package com.google.protobuf;

@kotlin.jvm.JvmSynthetic
public inline fun fileOptions(block: com.google.protobuf.FileOptionsKt.Dsl.() -> kotlin.Unit): com.google.protobuf.DescriptorProtos.FileOptions =
  com.google.protobuf.FileOptionsKt.Dsl._create(com.google.protobuf.DescriptorProtos.FileOptions.newBuilder()).apply { block() }._build()
public object FileOptionsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.google.protobuf.DescriptorProtos.FileOptions.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.google.protobuf.DescriptorProtos.FileOptions.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.google.protobuf.DescriptorProtos.FileOptions = _builder.build()

    /**
     * <pre>
     * Sets the Java package where classes generated from this .proto will be
     * placed.  By default, the proto package is used, but this is often
     * inappropriate because proto packages do not normally start with backwards
     * domain names.
     * </pre>
     *
     * <code>optional string java_package = 1;</code>
     */
    public var javaPackage: kotlin.String
      @JvmName("getJavaPackage")
      get() = _builder.getJavaPackage()
      @JvmName("setJavaPackage")
      set(value) {
        _builder.setJavaPackage(value)
      }
    /**
     * <pre>
     * Sets the Java package where classes generated from this .proto will be
     * placed.  By default, the proto package is used, but this is often
     * inappropriate because proto packages do not normally start with backwards
     * domain names.
     * </pre>
     *
     * <code>optional string java_package = 1;</code>
     */
    public fun clearJavaPackage() {
      _builder.clearJavaPackage()
    }
    /**
     * <pre>
     * Sets the Java package where classes generated from this .proto will be
     * placed.  By default, the proto package is used, but this is often
     * inappropriate because proto packages do not normally start with backwards
     * domain names.
     * </pre>
     *
     * <code>optional string java_package = 1;</code>
     * @return Whether the javaPackage field is set.
     */
    public fun hasJavaPackage(): kotlin.Boolean {
      return _builder.hasJavaPackage()
    }

    /**
     * <pre>
     * Controls the name of the wrapper Java class generated for the .proto file.
     * That class will always contain the .proto file's getDescriptor() method as
     * well as any top-level extensions defined in the .proto file.
     * If java_multiple_files is disabled, then all the other classes from the
     * .proto file will be nested inside the single wrapper outer class.
     * </pre>
     *
     * <code>optional string java_outer_classname = 8;</code>
     */
    public var javaOuterClassname: kotlin.String
      @JvmName("getJavaOuterClassname")
      get() = _builder.getJavaOuterClassname()
      @JvmName("setJavaOuterClassname")
      set(value) {
        _builder.setJavaOuterClassname(value)
      }
    /**
     * <pre>
     * Controls the name of the wrapper Java class generated for the .proto file.
     * That class will always contain the .proto file's getDescriptor() method as
     * well as any top-level extensions defined in the .proto file.
     * If java_multiple_files is disabled, then all the other classes from the
     * .proto file will be nested inside the single wrapper outer class.
     * </pre>
     *
     * <code>optional string java_outer_classname = 8;</code>
     */
    public fun clearJavaOuterClassname() {
      _builder.clearJavaOuterClassname()
    }
    /**
     * <pre>
     * Controls the name of the wrapper Java class generated for the .proto file.
     * That class will always contain the .proto file's getDescriptor() method as
     * well as any top-level extensions defined in the .proto file.
     * If java_multiple_files is disabled, then all the other classes from the
     * .proto file will be nested inside the single wrapper outer class.
     * </pre>
     *
     * <code>optional string java_outer_classname = 8;</code>
     * @return Whether the javaOuterClassname field is set.
     */
    public fun hasJavaOuterClassname(): kotlin.Boolean {
      return _builder.hasJavaOuterClassname()
    }

    /**
     * <pre>
     * If enabled, then the Java code generator will generate a separate .java
     * file for each top-level message, enum, and service defined in the .proto
     * file.  Thus, these types will *not* be nested inside the wrapper class
     * named by java_outer_classname.  However, the wrapper class will still be
     * generated to contain the file's getDescriptor() method as well as any
     * top-level extensions defined in the file.
     * </pre>
     *
     * <code>optional bool java_multiple_files = 10 [default = false];</code>
     */
    public var javaMultipleFiles: kotlin.Boolean
      @JvmName("getJavaMultipleFiles")
      get() = _builder.getJavaMultipleFiles()
      @JvmName("setJavaMultipleFiles")
      set(value) {
        _builder.setJavaMultipleFiles(value)
      }
    /**
     * <pre>
     * If enabled, then the Java code generator will generate a separate .java
     * file for each top-level message, enum, and service defined in the .proto
     * file.  Thus, these types will *not* be nested inside the wrapper class
     * named by java_outer_classname.  However, the wrapper class will still be
     * generated to contain the file's getDescriptor() method as well as any
     * top-level extensions defined in the file.
     * </pre>
     *
     * <code>optional bool java_multiple_files = 10 [default = false];</code>
     */
    public fun clearJavaMultipleFiles() {
      _builder.clearJavaMultipleFiles()
    }
    /**
     * <pre>
     * If enabled, then the Java code generator will generate a separate .java
     * file for each top-level message, enum, and service defined in the .proto
     * file.  Thus, these types will *not* be nested inside the wrapper class
     * named by java_outer_classname.  However, the wrapper class will still be
     * generated to contain the file's getDescriptor() method as well as any
     * top-level extensions defined in the file.
     * </pre>
     *
     * <code>optional bool java_multiple_files = 10 [default = false];</code>
     * @return Whether the javaMultipleFiles field is set.
     */
    public fun hasJavaMultipleFiles(): kotlin.Boolean {
      return _builder.hasJavaMultipleFiles()
    }

    /**
     * <pre>
     * This option does nothing.
     * </pre>
     *
     * <code>optional bool java_generate_equals_and_hash = 20 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field javaGenerateEqualsAndHash is deprecated") public var javaGenerateEqualsAndHash: kotlin.Boolean
      @JvmName("getJavaGenerateEqualsAndHash")
      get() = _builder.getJavaGenerateEqualsAndHash()
      @JvmName("setJavaGenerateEqualsAndHash")
      set(value) {
        _builder.setJavaGenerateEqualsAndHash(value)
      }
    /**
     * <pre>
     * This option does nothing.
     * </pre>
     *
     * <code>optional bool java_generate_equals_and_hash = 20 [deprecated = true];</code>
     * @deprecated
     */
    public fun clearJavaGenerateEqualsAndHash() {
      _builder.clearJavaGenerateEqualsAndHash()
    }
    /**
     * <pre>
     * This option does nothing.
     * </pre>
     *
     * <code>optional bool java_generate_equals_and_hash = 20 [deprecated = true];</code>
     * @deprecated
     * @return Whether the javaGenerateEqualsAndHash field is set.
     */
    public fun hasJavaGenerateEqualsAndHash(): kotlin.Boolean {
      return _builder.hasJavaGenerateEqualsAndHash()
    }

    /**
     * <pre>
     * If set true, then the Java2 code generator will generate code that
     * throws an exception whenever an attempt is made to assign a non-UTF-8
     * byte sequence to a string field.
     * Message reflection will do the same.
     * However, an extension field still accepts non-UTF-8 byte sequences.
     * This option has no effect on when used with the lite runtime.
     * </pre>
     *
     * <code>optional bool java_string_check_utf8 = 27 [default = false];</code>
     */
    public var javaStringCheckUtf8: kotlin.Boolean
      @JvmName("getJavaStringCheckUtf8")
      get() = _builder.getJavaStringCheckUtf8()
      @JvmName("setJavaStringCheckUtf8")
      set(value) {
        _builder.setJavaStringCheckUtf8(value)
      }
    /**
     * <pre>
     * If set true, then the Java2 code generator will generate code that
     * throws an exception whenever an attempt is made to assign a non-UTF-8
     * byte sequence to a string field.
     * Message reflection will do the same.
     * However, an extension field still accepts non-UTF-8 byte sequences.
     * This option has no effect on when used with the lite runtime.
     * </pre>
     *
     * <code>optional bool java_string_check_utf8 = 27 [default = false];</code>
     */
    public fun clearJavaStringCheckUtf8() {
      _builder.clearJavaStringCheckUtf8()
    }
    /**
     * <pre>
     * If set true, then the Java2 code generator will generate code that
     * throws an exception whenever an attempt is made to assign a non-UTF-8
     * byte sequence to a string field.
     * Message reflection will do the same.
     * However, an extension field still accepts non-UTF-8 byte sequences.
     * This option has no effect on when used with the lite runtime.
     * </pre>
     *
     * <code>optional bool java_string_check_utf8 = 27 [default = false];</code>
     * @return Whether the javaStringCheckUtf8 field is set.
     */
    public fun hasJavaStringCheckUtf8(): kotlin.Boolean {
      return _builder.hasJavaStringCheckUtf8()
    }

    /**
     * <code>optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];</code>
     */
    public var optimizeFor: com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode
      @JvmName("getOptimizeFor")
      get() = _builder.getOptimizeFor()
      @JvmName("setOptimizeFor")
      set(value) {
        _builder.setOptimizeFor(value)
      }
    /**
     * <code>optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];</code>
     */
    public fun clearOptimizeFor() {
      _builder.clearOptimizeFor()
    }
    /**
     * <code>optional .google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED];</code>
     * @return Whether the optimizeFor field is set.
     */
    public fun hasOptimizeFor(): kotlin.Boolean {
      return _builder.hasOptimizeFor()
    }

    /**
     * <pre>
     * Sets the Go package where structs generated from this .proto will be
     * placed. If omitted, the Go package will be derived from the following:
     *   - The basename of the package import path, if provided.
     *   - Otherwise, the package statement in the .proto file, if present.
     *   - Otherwise, the basename of the .proto file, without extension.
     * </pre>
     *
     * <code>optional string go_package = 11;</code>
     */
    public var goPackage: kotlin.String
      @JvmName("getGoPackage")
      get() = _builder.getGoPackage()
      @JvmName("setGoPackage")
      set(value) {
        _builder.setGoPackage(value)
      }
    /**
     * <pre>
     * Sets the Go package where structs generated from this .proto will be
     * placed. If omitted, the Go package will be derived from the following:
     *   - The basename of the package import path, if provided.
     *   - Otherwise, the package statement in the .proto file, if present.
     *   - Otherwise, the basename of the .proto file, without extension.
     * </pre>
     *
     * <code>optional string go_package = 11;</code>
     */
    public fun clearGoPackage() {
      _builder.clearGoPackage()
    }
    /**
     * <pre>
     * Sets the Go package where structs generated from this .proto will be
     * placed. If omitted, the Go package will be derived from the following:
     *   - The basename of the package import path, if provided.
     *   - Otherwise, the package statement in the .proto file, if present.
     *   - Otherwise, the basename of the .proto file, without extension.
     * </pre>
     *
     * <code>optional string go_package = 11;</code>
     * @return Whether the goPackage field is set.
     */
    public fun hasGoPackage(): kotlin.Boolean {
      return _builder.hasGoPackage()
    }

    /**
     * <pre>
     * Should generic services be generated in each language?  "Generic" services
     * are not specific to any particular RPC system.  They are generated by the
     * main code generators in each language (without additional plugins).
     * Generic services were the only kind of service generation supported by
     * early versions of google.protobuf.
     * Generic services are now considered deprecated in favor of using plugins
     * that generate code specific to your particular RPC system.  Therefore,
     * these default to false.  Old code which depends on generic services should
     * explicitly set them to true.
     * </pre>
     *
     * <code>optional bool cc_generic_services = 16 [default = false];</code>
     */
    public var ccGenericServices: kotlin.Boolean
      @JvmName("getCcGenericServices")
      get() = _builder.getCcGenericServices()
      @JvmName("setCcGenericServices")
      set(value) {
        _builder.setCcGenericServices(value)
      }
    /**
     * <pre>
     * Should generic services be generated in each language?  "Generic" services
     * are not specific to any particular RPC system.  They are generated by the
     * main code generators in each language (without additional plugins).
     * Generic services were the only kind of service generation supported by
     * early versions of google.protobuf.
     * Generic services are now considered deprecated in favor of using plugins
     * that generate code specific to your particular RPC system.  Therefore,
     * these default to false.  Old code which depends on generic services should
     * explicitly set them to true.
     * </pre>
     *
     * <code>optional bool cc_generic_services = 16 [default = false];</code>
     */
    public fun clearCcGenericServices() {
      _builder.clearCcGenericServices()
    }
    /**
     * <pre>
     * Should generic services be generated in each language?  "Generic" services
     * are not specific to any particular RPC system.  They are generated by the
     * main code generators in each language (without additional plugins).
     * Generic services were the only kind of service generation supported by
     * early versions of google.protobuf.
     * Generic services are now considered deprecated in favor of using plugins
     * that generate code specific to your particular RPC system.  Therefore,
     * these default to false.  Old code which depends on generic services should
     * explicitly set them to true.
     * </pre>
     *
     * <code>optional bool cc_generic_services = 16 [default = false];</code>
     * @return Whether the ccGenericServices field is set.
     */
    public fun hasCcGenericServices(): kotlin.Boolean {
      return _builder.hasCcGenericServices()
    }

    /**
     * <code>optional bool java_generic_services = 17 [default = false];</code>
     */
    public var javaGenericServices: kotlin.Boolean
      @JvmName("getJavaGenericServices")
      get() = _builder.getJavaGenericServices()
      @JvmName("setJavaGenericServices")
      set(value) {
        _builder.setJavaGenericServices(value)
      }
    /**
     * <code>optional bool java_generic_services = 17 [default = false];</code>
     */
    public fun clearJavaGenericServices() {
      _builder.clearJavaGenericServices()
    }
    /**
     * <code>optional bool java_generic_services = 17 [default = false];</code>
     * @return Whether the javaGenericServices field is set.
     */
    public fun hasJavaGenericServices(): kotlin.Boolean {
      return _builder.hasJavaGenericServices()
    }

    /**
     * <code>optional bool py_generic_services = 18 [default = false];</code>
     */
    public var pyGenericServices: kotlin.Boolean
      @JvmName("getPyGenericServices")
      get() = _builder.getPyGenericServices()
      @JvmName("setPyGenericServices")
      set(value) {
        _builder.setPyGenericServices(value)
      }
    /**
     * <code>optional bool py_generic_services = 18 [default = false];</code>
     */
    public fun clearPyGenericServices() {
      _builder.clearPyGenericServices()
    }
    /**
     * <code>optional bool py_generic_services = 18 [default = false];</code>
     * @return Whether the pyGenericServices field is set.
     */
    public fun hasPyGenericServices(): kotlin.Boolean {
      return _builder.hasPyGenericServices()
    }

    /**
     * <code>optional bool php_generic_services = 42 [default = false];</code>
     */
    public var phpGenericServices: kotlin.Boolean
      @JvmName("getPhpGenericServices")
      get() = _builder.getPhpGenericServices()
      @JvmName("setPhpGenericServices")
      set(value) {
        _builder.setPhpGenericServices(value)
      }
    /**
     * <code>optional bool php_generic_services = 42 [default = false];</code>
     */
    public fun clearPhpGenericServices() {
      _builder.clearPhpGenericServices()
    }
    /**
     * <code>optional bool php_generic_services = 42 [default = false];</code>
     * @return Whether the phpGenericServices field is set.
     */
    public fun hasPhpGenericServices(): kotlin.Boolean {
      return _builder.hasPhpGenericServices()
    }

    /**
     * <pre>
     * Is this file deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for everything in the file, or it will be completely ignored; in the very
     * least, this is a formalization for deprecating files.
     * </pre>
     *
     * <code>optional bool deprecated = 23 [default = false];</code>
     */
    public var deprecated: kotlin.Boolean
      @JvmName("getDeprecated")
      get() = _builder.getDeprecated()
      @JvmName("setDeprecated")
      set(value) {
        _builder.setDeprecated(value)
      }
    /**
     * <pre>
     * Is this file deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for everything in the file, or it will be completely ignored; in the very
     * least, this is a formalization for deprecating files.
     * </pre>
     *
     * <code>optional bool deprecated = 23 [default = false];</code>
     */
    public fun clearDeprecated() {
      _builder.clearDeprecated()
    }
    /**
     * <pre>
     * Is this file deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for everything in the file, or it will be completely ignored; in the very
     * least, this is a formalization for deprecating files.
     * </pre>
     *
     * <code>optional bool deprecated = 23 [default = false];</code>
     * @return Whether the deprecated field is set.
     */
    public fun hasDeprecated(): kotlin.Boolean {
      return _builder.hasDeprecated()
    }

    /**
     * <pre>
     * Enables the use of arenas for the proto messages in this file. This applies
     * only to generated classes for C++.
     * </pre>
     *
     * <code>optional bool cc_enable_arenas = 31 [default = true];</code>
     */
    public var ccEnableArenas: kotlin.Boolean
      @JvmName("getCcEnableArenas")
      get() = _builder.getCcEnableArenas()
      @JvmName("setCcEnableArenas")
      set(value) {
        _builder.setCcEnableArenas(value)
      }
    /**
     * <pre>
     * Enables the use of arenas for the proto messages in this file. This applies
     * only to generated classes for C++.
     * </pre>
     *
     * <code>optional bool cc_enable_arenas = 31 [default = true];</code>
     */
    public fun clearCcEnableArenas() {
      _builder.clearCcEnableArenas()
    }
    /**
     * <pre>
     * Enables the use of arenas for the proto messages in this file. This applies
     * only to generated classes for C++.
     * </pre>
     *
     * <code>optional bool cc_enable_arenas = 31 [default = true];</code>
     * @return Whether the ccEnableArenas field is set.
     */
    public fun hasCcEnableArenas(): kotlin.Boolean {
      return _builder.hasCcEnableArenas()
    }

    /**
     * <pre>
     * Sets the objective c class prefix which is prepended to all objective c
     * generated classes from this .proto. There is no default.
     * </pre>
     *
     * <code>optional string objc_class_prefix = 36;</code>
     */
    public var objcClassPrefix: kotlin.String
      @JvmName("getObjcClassPrefix")
      get() = _builder.getObjcClassPrefix()
      @JvmName("setObjcClassPrefix")
      set(value) {
        _builder.setObjcClassPrefix(value)
      }
    /**
     * <pre>
     * Sets the objective c class prefix which is prepended to all objective c
     * generated classes from this .proto. There is no default.
     * </pre>
     *
     * <code>optional string objc_class_prefix = 36;</code>
     */
    public fun clearObjcClassPrefix() {
      _builder.clearObjcClassPrefix()
    }
    /**
     * <pre>
     * Sets the objective c class prefix which is prepended to all objective c
     * generated classes from this .proto. There is no default.
     * </pre>
     *
     * <code>optional string objc_class_prefix = 36;</code>
     * @return Whether the objcClassPrefix field is set.
     */
    public fun hasObjcClassPrefix(): kotlin.Boolean {
      return _builder.hasObjcClassPrefix()
    }

    /**
     * <pre>
     * Namespace for generated classes; defaults to the package.
     * </pre>
     *
     * <code>optional string csharp_namespace = 37;</code>
     */
    public var csharpNamespace: kotlin.String
      @JvmName("getCsharpNamespace")
      get() = _builder.getCsharpNamespace()
      @JvmName("setCsharpNamespace")
      set(value) {
        _builder.setCsharpNamespace(value)
      }
    /**
     * <pre>
     * Namespace for generated classes; defaults to the package.
     * </pre>
     *
     * <code>optional string csharp_namespace = 37;</code>
     */
    public fun clearCsharpNamespace() {
      _builder.clearCsharpNamespace()
    }
    /**
     * <pre>
     * Namespace for generated classes; defaults to the package.
     * </pre>
     *
     * <code>optional string csharp_namespace = 37;</code>
     * @return Whether the csharpNamespace field is set.
     */
    public fun hasCsharpNamespace(): kotlin.Boolean {
      return _builder.hasCsharpNamespace()
    }

    /**
     * <pre>
     * By default Swift generators will take the proto package and CamelCase it
     * replacing '.' with underscore and use that to prefix the types/symbols
     * defined. When this options is provided, they will use this value instead
     * to prefix the types/symbols defined.
     * </pre>
     *
     * <code>optional string swift_prefix = 39;</code>
     */
    public var swiftPrefix: kotlin.String
      @JvmName("getSwiftPrefix")
      get() = _builder.getSwiftPrefix()
      @JvmName("setSwiftPrefix")
      set(value) {
        _builder.setSwiftPrefix(value)
      }
    /**
     * <pre>
     * By default Swift generators will take the proto package and CamelCase it
     * replacing '.' with underscore and use that to prefix the types/symbols
     * defined. When this options is provided, they will use this value instead
     * to prefix the types/symbols defined.
     * </pre>
     *
     * <code>optional string swift_prefix = 39;</code>
     */
    public fun clearSwiftPrefix() {
      _builder.clearSwiftPrefix()
    }
    /**
     * <pre>
     * By default Swift generators will take the proto package and CamelCase it
     * replacing '.' with underscore and use that to prefix the types/symbols
     * defined. When this options is provided, they will use this value instead
     * to prefix the types/symbols defined.
     * </pre>
     *
     * <code>optional string swift_prefix = 39;</code>
     * @return Whether the swiftPrefix field is set.
     */
    public fun hasSwiftPrefix(): kotlin.Boolean {
      return _builder.hasSwiftPrefix()
    }

    /**
     * <pre>
     * Sets the php class prefix which is prepended to all php generated classes
     * from this .proto. Default is empty.
     * </pre>
     *
     * <code>optional string php_class_prefix = 40;</code>
     */
    public var phpClassPrefix: kotlin.String
      @JvmName("getPhpClassPrefix")
      get() = _builder.getPhpClassPrefix()
      @JvmName("setPhpClassPrefix")
      set(value) {
        _builder.setPhpClassPrefix(value)
      }
    /**
     * <pre>
     * Sets the php class prefix which is prepended to all php generated classes
     * from this .proto. Default is empty.
     * </pre>
     *
     * <code>optional string php_class_prefix = 40;</code>
     */
    public fun clearPhpClassPrefix() {
      _builder.clearPhpClassPrefix()
    }
    /**
     * <pre>
     * Sets the php class prefix which is prepended to all php generated classes
     * from this .proto. Default is empty.
     * </pre>
     *
     * <code>optional string php_class_prefix = 40;</code>
     * @return Whether the phpClassPrefix field is set.
     */
    public fun hasPhpClassPrefix(): kotlin.Boolean {
      return _builder.hasPhpClassPrefix()
    }

    /**
     * <pre>
     * Use this option to change the namespace of php generated classes. Default
     * is empty. When this option is empty, the package name will be used for
     * determining the namespace.
     * </pre>
     *
     * <code>optional string php_namespace = 41;</code>
     */
    public var phpNamespace: kotlin.String
      @JvmName("getPhpNamespace")
      get() = _builder.getPhpNamespace()
      @JvmName("setPhpNamespace")
      set(value) {
        _builder.setPhpNamespace(value)
      }
    /**
     * <pre>
     * Use this option to change the namespace of php generated classes. Default
     * is empty. When this option is empty, the package name will be used for
     * determining the namespace.
     * </pre>
     *
     * <code>optional string php_namespace = 41;</code>
     */
    public fun clearPhpNamespace() {
      _builder.clearPhpNamespace()
    }
    /**
     * <pre>
     * Use this option to change the namespace of php generated classes. Default
     * is empty. When this option is empty, the package name will be used for
     * determining the namespace.
     * </pre>
     *
     * <code>optional string php_namespace = 41;</code>
     * @return Whether the phpNamespace field is set.
     */
    public fun hasPhpNamespace(): kotlin.Boolean {
      return _builder.hasPhpNamespace()
    }

    /**
     * <pre>
     * Use this option to change the namespace of php generated metadata classes.
     * Default is empty. When this option is empty, the proto file name will be
     * used for determining the namespace.
     * </pre>
     *
     * <code>optional string php_metadata_namespace = 44;</code>
     */
    public var phpMetadataNamespace: kotlin.String
      @JvmName("getPhpMetadataNamespace")
      get() = _builder.getPhpMetadataNamespace()
      @JvmName("setPhpMetadataNamespace")
      set(value) {
        _builder.setPhpMetadataNamespace(value)
      }
    /**
     * <pre>
     * Use this option to change the namespace of php generated metadata classes.
     * Default is empty. When this option is empty, the proto file name will be
     * used for determining the namespace.
     * </pre>
     *
     * <code>optional string php_metadata_namespace = 44;</code>
     */
    public fun clearPhpMetadataNamespace() {
      _builder.clearPhpMetadataNamespace()
    }
    /**
     * <pre>
     * Use this option to change the namespace of php generated metadata classes.
     * Default is empty. When this option is empty, the proto file name will be
     * used for determining the namespace.
     * </pre>
     *
     * <code>optional string php_metadata_namespace = 44;</code>
     * @return Whether the phpMetadataNamespace field is set.
     */
    public fun hasPhpMetadataNamespace(): kotlin.Boolean {
      return _builder.hasPhpMetadataNamespace()
    }

    /**
     * <pre>
     * Use this option to change the package of ruby generated classes. Default
     * is empty. When this option is not set, the package name will be used for
     * determining the ruby package.
     * </pre>
     *
     * <code>optional string ruby_package = 45;</code>
     */
    public var rubyPackage: kotlin.String
      @JvmName("getRubyPackage")
      get() = _builder.getRubyPackage()
      @JvmName("setRubyPackage")
      set(value) {
        _builder.setRubyPackage(value)
      }
    /**
     * <pre>
     * Use this option to change the package of ruby generated classes. Default
     * is empty. When this option is not set, the package name will be used for
     * determining the ruby package.
     * </pre>
     *
     * <code>optional string ruby_package = 45;</code>
     */
    public fun clearRubyPackage() {
      _builder.clearRubyPackage()
    }
    /**
     * <pre>
     * Use this option to change the package of ruby generated classes. Default
     * is empty. When this option is not set, the package name will be used for
     * determining the ruby package.
     * </pre>
     *
     * <code>optional string ruby_package = 45;</code>
     * @return Whether the rubyPackage field is set.
     */
    public fun hasRubyPackage(): kotlin.Boolean {
      return _builder.hasRubyPackage()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class UninterpretedOptionProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     */
     public val uninterpretedOption: com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getUninterpretedOptionList()
      )
    /**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     * @param value The uninterpretedOption to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addUninterpretedOption")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>.add(value: com.google.protobuf.DescriptorProtos.UninterpretedOption) {
      _builder.addUninterpretedOption(value)
    }/**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     * @param value The uninterpretedOption to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignUninterpretedOption")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>.plusAssign(value: com.google.protobuf.DescriptorProtos.UninterpretedOption) {
      add(value)
    }/**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     * @param values The uninterpretedOption to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllUninterpretedOption")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>.addAll(values: kotlin.collections.Iterable<com.google.protobuf.DescriptorProtos.UninterpretedOption>) {
      _builder.addAllUninterpretedOption(values)
    }/**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     * @param values The uninterpretedOption to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllUninterpretedOption")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.protobuf.DescriptorProtos.UninterpretedOption>) {
      addAll(values)
    }/**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     * @param index The index to set the value at.
     * @param value The uninterpretedOption to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setUninterpretedOption")
    public operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>.set(index: kotlin.Int, value: com.google.protobuf.DescriptorProtos.UninterpretedOption) {
      _builder.setUninterpretedOption(index, value)
    }/**
     * <pre>
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     * </pre>
     *
     * <code>repeated .google.protobuf.UninterpretedOption uninterpreted_option = 999;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearUninterpretedOption")
    public fun com.google.protobuf.kotlin.DslList<com.google.protobuf.DescriptorProtos.UninterpretedOption, UninterpretedOptionProxy>.clear() {
      _builder.clearUninterpretedOption()
    }@Suppress("UNCHECKED_CAST")
    @kotlin.jvm.JvmSynthetic
    public operator fun <T> get(extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, T>): T {
      return if (extension.isRepeated) {
        get(extension as com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, List<*>>) as T
      } else {
        _builder.getExtension(extension)
      }
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @kotlin.jvm.JvmName("-getRepeatedExtension")
    public operator fun <E> get(
      extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, List<E>>
    ): com.google.protobuf.kotlin.ExtensionList<E, com.google.protobuf.DescriptorProtos.FileOptions> {
      return com.google.protobuf.kotlin.ExtensionList(extension, _builder.getExtension(extension))
    }

    @kotlin.jvm.JvmSynthetic
    public operator fun contains(extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, *>): Boolean {
      return _builder.hasExtension(extension)
    }

    @kotlin.jvm.JvmSynthetic
    public fun clear(extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, *>) {
      _builder.clearExtension(extension)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun <T> setExtension(extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, T>, value: T) {
      _builder.setExtension(extension, value)
    }

    @kotlin.jvm.JvmSynthetic
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun <T : Comparable<T>> set(
      extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, T>,
      value: T
    ) {
      setExtension(extension, value)
    }

    @kotlin.jvm.JvmSynthetic
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun set(
      extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, com.google.protobuf.ByteString>,
      value: com.google.protobuf.ByteString
    ) {
      setExtension(extension, value)
    }

    @kotlin.jvm.JvmSynthetic
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun <T : com.google.protobuf.MessageLite> set(
      extension: com.google.protobuf.ExtensionLite<com.google.protobuf.DescriptorProtos.FileOptions, T>,
      value: T
    ) {
      setExtension(extension, value)
    }

    @kotlin.jvm.JvmSynthetic
    public fun <E> com.google.protobuf.kotlin.ExtensionList<E, com.google.protobuf.DescriptorProtos.FileOptions>.add(value: E) {
      _builder.addExtension(this.extension, value)
    }

    @kotlin.jvm.JvmSynthetic
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun <E> com.google.protobuf.kotlin.ExtensionList<E, com.google.protobuf.DescriptorProtos.FileOptions>.plusAssign(value: E) {
      add(value)
    }

    @kotlin.jvm.JvmSynthetic
    public fun <E> com.google.protobuf.kotlin.ExtensionList<E, com.google.protobuf.DescriptorProtos.FileOptions>.addAll(values: Iterable<E>) {
      for (value in values) {
        add(value)
      }
    }

    @kotlin.jvm.JvmSynthetic
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun <E> com.google.protobuf.kotlin.ExtensionList<E, com.google.protobuf.DescriptorProtos.FileOptions>.plusAssign(values: Iterable<E>) {
      addAll(values)
    }

    @kotlin.jvm.JvmSynthetic
    public operator fun <E> com.google.protobuf.kotlin.ExtensionList<E, com.google.protobuf.DescriptorProtos.FileOptions>.set(index: Int, value: E) {
      _builder.setExtension(this.extension, index, value)
    }

    @kotlin.jvm.JvmSynthetic
    @Suppress("NOTHING_TO_INLINE")
    public inline fun com.google.protobuf.kotlin.ExtensionList<*, com.google.protobuf.DescriptorProtos.FileOptions>.clear() {
      clear(extension)
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.google.protobuf.DescriptorProtos.FileOptions.copy(block: com.google.protobuf.FileOptionsKt.Dsl.() -> kotlin.Unit): com.google.protobuf.DescriptorProtos.FileOptions =
  com.google.protobuf.FileOptionsKt.Dsl._create(this.toBuilder()).apply { block() }._build()
